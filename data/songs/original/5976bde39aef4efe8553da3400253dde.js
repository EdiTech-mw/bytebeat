BB=t=>(c=1.047,cs=1.107,d=1.174,ds=1.243,e=1.318,f=1.389,fs=1.476,g=1.568,gs=1.655,a=1.754,as=1.857,b=1.977,
t*=(32000/11025),
T=t*1.10,BAR=T>>15,BAR2=T/(1<<15),

(t&65535)||(
drumpat="SHH0SH0HS0H0SHHH",
inst='011100100010101111011010011000000',
l1='23423423',
l2=[b,b,b,d*2,g,g,fs,as],
l3=[2,3.185,4,2,3.185,4,2,3.185],
snare1=0,
snare2=0
),

clam=(x)=>(min(1,max(0,x))),

snare1=(((snare1*31)+random())/32),S1=((snare1)*4)>2,
snare2=(((snare2*31)+random())/32),S2=((snare2)*4)>2,

S=BAR>31?random():S1,
H=BAR>31?((sin(t/5)+1)/2):((t>>4)*PI)&1,

rollin=(BAR>7?0:clam(BAR2-7)*S*128)|(BAR>31?0:clam(BAR2-31)*S*128),

drum1=drumpat[T>>12&15],
drum=(drum1=='S'?S:drum1=='H'?H:drum1)*(256-((T>>4)&255))/2,

A=t*l1[T>>12&7],
B=t*l3[T>>12&7],
lead=(x,y)=>(inst[[A,A,A,A,A,A,A,B][T>>15&7]*l2[BAR&7]>>x&31]*y),
superlead=(lead(6,64)+lead(5,32)+lead(4,16)+lead(3,8)+lead(2,4)+lead(1,2)+lead(0,1)),

(
	BAR>31?superlead:lead(6,64)
)+(rollin?rollin:(BAR>7?drum:0))
),

this.convData ??= [], // need this
convData.i=0,

CONV=(Z,KERNEL=[1,1,1,1,1])=>{
	this.convData[convData.i] ??= {}; // need this
	convData[convData.i].d ??= { l: KERNEL.length, m: max(1,abs(KERNEL.reduce((a,v)=>a+v))) } ;
	convData[convData.i].k ??= {a: KERNEL.slice().reverse(), b: KERNEL.slice().map(v=>-v).reverse()}
	convData[convData.i].a??=Array.from(KERNEL,_=>0);
	convData[convData.i].b??=0;
	Z&=255; // Somehow this one line severely optimizes the code (it's much slower without.) At least have Z=+Z here.
	convData[convData.i].a[convData[convData.i].b%convData[convData.i].d.l] = Z;
	convData[convData.i].b++;
	let O = 0;
	for(let i = 0; i < KERNEL.length; i++) {
		O+=convData[convData.i].a[(i+convData[convData.i].b)%convData[convData.i].d.l]*(convData[convData.i].k.a)[i];
	}
	const Q=O/convData[convData.i].d.m; // i think you should just divide yourself if you use negative values, this is terrible
	convData.i++;
	return Q;
},
CONV(BB(t),(this.kernel??(kernel=unescape(escape`䁿䀅䃺䀅䃺䀅䃺䀄䃻䀄䃼䀃䃼䀂䃽䀂䃾䀁䃾䀀䃿䀀䃿䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䀀䀀䀀䀀䀀䃿䀀䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䀀䃿䀀䀀䃿䀀䃿䀀䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀂䀂䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀂䀂䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀀䃿䀀䃿䃿䀀䃿䀀䃿䀀䃿䀀䃿䀁䀃䃿䀀䃿䀀䃿䀀䀀䃿䀀䃿䀁䃾䃿䀀䃿䃿䀀䃿䀀䃿䀀䃿䀀䃾䃼䀀䀀䃿䀀䃿䀀䀃䀀䃿䀀䃿䀀䃿䀀䃾䃼䀀䃿䀀䃿䀃䀁䃿䀀䃿䃿䀀䃿䃼䀀䃼䃿䀀䃿䀀䃿䀀䃿䀁䃾䃽䃾䃽䀂䃿䀀䃿䀀䀀䃿䀀䃿䀂䃽䃿䃾䃿䀀䃿䃼䃿䀁䃼䃾䃿䀀䃿䀁䃽䃽䃿䀀䀁䃿䃿䀀䃽䃽䀁䃿䀁䃽䃽䀀䃿䀀䃾䃿䀀䃿䀀䃼䃾䀀䀀䃿䃿䀂䃺䃼䃿䃿䀀䃿䀀䃽䃽䀁䃽䀁䀁䃾䃾䃺䃿䀃䃾䃽䀀䃽䀁䃿䀀䀀䃾䀄䀁䀃䃽䀀䃽䃽䀀䃽䀀䃿䀀䃾䀄䀀䀃䀃䃽䀁䃼䃽䃽䀃䀁䀀䃽䀀䀂䃿䀂䃽䃿䀀䃿䃽䃽䀂䀀䃻䃿䃿䀂䀃䃾䀈䀂䃿䀄䀁䃿䃾䃿䃽䀂䀂䀂䀃䃻䀃䀄䃾䀀䀄䃾䃿䃿䃼䀁䀂䀀䃽䀂䀂䀂䃿䃿䀆䀄䃿䀂䃾䀀䃿䀀䀆䀀䀂䀀䀀䃾䀄䀅䃾䀂䀅䃾䃾䀀䃿䀀䃿䃾䃾䀂䀀䀂䀁䃿䀂䀀䀁䀁䀂䀃䀂䀂䃽䀀䀁䀂䀂䃾䀅䀄䃾䀃䃿䀀䀂䃽䀃䀂䀀䃾䃿䀀䃾䀁䃾䃽䀂䃽䃽䃾䀅䀂䃾䃾䃻䀂䀀䀃䃾䀀䃽䃽䀀䃿䀃䃾䀁䃿䃾䀀䀂䀀䃼䃿䃿䃽䀀䃾䀃䀁䀀䃿䀀䀄䀁䃻䃼䀄䀀䃼䃿䃿䃺䃿䀀䃾䀀䀁䀀䀃䀂䀁䃾䃼䃻䀀䀁䃽䀁䃾䀃䀀䀂䃿䀄䀄䃽䃼䀂䀀䃿䀀䃾䀁䃻䀀䀀䃿䃷䃻䃽䃺䃽䀂䀃䃽䃾䀀䃻䃻䀁䃽䃿䀀䃾䀆䀄䃿䃾䃻䀃䃿䃿䃿䀁䃾䃽䀄䀆䀁䃸䀀䀀䃻䃽䃿䀀䀀䃺䃿䃽䃾䀃䃿䃼䃿䀁䃿䀅䃿䃾䀀䃿䀁䀀䃺䃺䀈䃽䃹䀃䃿䀅䀃䃾䃺䃿䀁䃽䃾䃾䀀䃽䀁䃾䃾䃽䃽䀀䃿䀁䃽䀅䀄䀄䀄䃿䃽䃼䀀䀁䀁䀁䃿䀄䀄䃽䃿䃻䃻䃾䃾䃼䀀䀀䀁䃿䀂䃿䃼䀁䀁䃿䃺䀁䀂䃽䃿䀀䃾䃾䃾䃽䃾䀁䃻䀀䃿䃽䃾䃼䃿䃽䀁䀁䃾䀀䀂䃾䃿䀂䀂䃻䃺䀄䀁䃿䀃䃻䃿䃿䀁䃾䃻䃾䃾䀃䀁䀁䀁䀁䃿䃾䃽䃿䃹䀃䃽䃿䀇䃾䀀䃿䀆䀂䃿䃽䃼䃽䀀䀁䀀䀁䃾䀂䃾䃿䀁䃾䀁䀀䀀䃼䃻䃿䀁䃽䀂䀂䃻䃾䃾䀁䀀䀁䀂䀀䃾䃾䃿䀄䀃䃽䀀䀀䃽䃿䃽䃾䃾䃽䀀䀁䀆䃷䃾䃾䃾䀃䃷䃾䀁䃿䀂䃿䃿䃿䀂䀃䀁䀁䃾䀁䀁䀁䃿䃾䃾䀁䃾䀃䃿䀂䀆䃷䃽䃽䃿䀀䃿䀁䃿䃿䃽䀂䀄䀀䃿䃿䀂䃾䀀䀂䀀䀃䃿䃿䃾䀀䀁䃽䀁䀃䃾䃾䀁䃼䃽䃾䀁䀀䃿䀂䃼䃾䃾䃿䀁䃿䀀䀀䃽䀂䀄䃽䀃䃽䃸䀃䀁䀁䃿䀀䀂䃽䃿䃿䃿䀀䀁䃺䃿䀁䃽䀂䀁䀂䃿䃽䃿䀁䀁䃾䀁䀀䀀䀀䀀䃾䀅䀇䃾䀀䃿䀂䃿䀁䃾䀁䃿䃾䃿䃼䀀䀀䃿䀁䀁䃾䃽䃾䀃䀁䀄䀁䀂䃹䃻䀁䃼䀁䃿䀀䃿䀃䀃䀂䃾䀁䃿䃼䀁䃾䃿䀁䃽䀀䃿䃽䀂䀀䃾䃽䃾䃽䃾䃾䀀䃿䃿䃾䀀䀁䀂䃾䀄䀆䃾䃿䃿䀁䃽䀀䀂䀂䃿䃾䀀䃽䀄䃾䃽䃾䃹䃿䀀䀁䀀䀀䀁䀀䀁䃿䀁䃿䃼䀀䃾䀂䀁䃿䀀䃻䀀䃽䃽䃿䃿䃿䃿䀁䀀䀀䀁䃿䃾䀀䃿䀂䃹䃽䃾䃼䀁䃾䃿䃿䀇䀂䃹䀁䃿䃿䀁䀃䀃䀃䀇䀀䃽䃽䃽䃿䃿䃽䀁䃼䃺䀁䃾䀀䀂䃿䃾䀁䀂䀄䃿䀂䀂䃿䃿䃿䀂䃾䃾䃿䃿䃾䀀䀀䀁䀀䃾䀁䀀䀀䀀䃾䀀䃽䀂䃿䃻䃾䃾䃾䃻䃾䀀䃾䃺䃿䀁䀂䀇䃾䃼䀁䃾䀂䀃䃿䃽䀂䀁䃿䃽䀀䀀䃾䀀䃸䀀䀄䀀䀀䃽䃿䀁䀀䃾䃿䃺䃽䃾䃻䀁䃿䀆䀀䃿䀆䃽䃿䃿䀁䃿䀀䀀䃿䃿䃿䀁䀁䃽䃾䀄䃻䃿䀀䃽䀀䀁䀀䃿䀁䃻䃿䃿䃽䀀䀀䃾䀀䀀䃿䃿䀄䃿䀀䀂䃽䀁䃽䀀䃿䃽䃾䀁䀅䀀䀁䀂䀂䃼䃼䀀䀂䀀䃿䀀䃿䃼䃾䀂䃿䀂䃽䀂䀁䃿䀁䃿䀁䀀䀀䃽䀀䃽䃿䀀䃽䀃䀀䃽䀀䀂䀀䃾䀁䀁䀃䀂䃿䃽䃾䀁䃿䀀䀃䀂䃽䀇䀄䃿䀂䃿䀁䃽䃿䀀䃾䀀䀃䃿䃾䀀䃿䃿䃾䃻䃾䀀䀀䀀䃿䀁䀀䀁䀀䀅䀃䃾䃺䀁䀀䀂䀁䃾䀃䃾䀀䃿䀁䀀䃿䃽䃿䀁䃿䃾䀀䀀䀁䀁䃿䀀䃿䀀䃽䀁䃼䃻䀃䃿䀀䀀䀁䀀䃾䀁䀁䀀䃽䀀䃿䃾䀀䃿䃾䃿䀁䃿䀂䃿䃾䀁䃾䀀䀂䀁䀂䃾䃼䀂䃾䃿䀀䀃䀁䃿䀀䀁䃿䃾䀁䃽䃿䀀䃿䀀䀀䃽䀁䃿䀀䀀䃿䀄䀀䀀䃿䃼䃿䃿䃾䀀䃿䀁䃿䀁䃿䀂䀃䃾䃾䀀䀁䃾䃿䀁䃿䀁䀁䃾䀀䀂䃿䃺䃽䀂䀁䀀䀀䃽䃿䃿䃿䀀䃽䃾䃾䃿䀁䃾䃿䃾䀂䃼䃽䀁䃿䀆䃾䀀䃹䃾䃿䃹䀂䀁䀁䃿䃾䃿䃿䃽䀀䀀䀁䀀䃿䀀䀀䀂䀃䀀䃾䀂䀃䃿䀁䃿䃼䀅䀁䀁䃾䃼䀀䃾䃿䀀䀀䃾䃿䃾䀀䀁䃿䃿䀀䃽䃼䃼䀀䀁䃾䃾䀀䀀䀀䀅䃽䀀䀃䀀䀀䀀䀁䀀䀀䃿䀄䀀䀀䀁䀀䃾䃾䀁䃾䃼䀃䀀䃿䀀䃽䀃䃾䃼䃾䃿䀀䀁䀂䃿䀀䃿䀀䃿䀀䀀䃿䀁䃿䃿䃿䃿䀁䀁䃿䃿䃽䃾䃼䀀䀂䀁䀄䀁䃿䀀䀂䀁䃿䃿䃿䃿䃿䃾䀀䃾䀀䀀䀁䀀䀂䀃䃾䀂䃿䀀䀀䃿䃾䃿䀁䀀䃽䀀䀂䀂䀂䃿䀀䃿䀁䀀䃿䃿䃾䃽䃿䀀䀀䀃䀀䃼䀁䀂䃾䀀䃾䀀䃿䃿䃿䀁䀀䃿䀀䀀䃿䃾䀀䃽䀀䃿䃾䀀䀁䃿䃾䀂䀂䀀䀀䃿䃾䃿䃾䀂䃾䀁䀁䃽䀀䃾䃾䃾䀀䃿䃿䀁䃿䃾䀁䀀䀁䃿䃿䀁䀃䀁䃽䃿䃺䀁䃽䃻䃾䀁䀀䃽䀀䃿䀁䃿䀀䀂䀀䀀䀂䃾䀀䃿䃾䃿䀀䀀䀀䀄䀃䃾䃿䀁䀁䃿䀀䀃䀀䃾䃾䃾䃽䃿䃿䀁䀃䃾䀅䀁䃿䀁䀀䀁䀁䃾䃽䃿䃿䀂䀀䃿䃿䀀䀁䃿䃾䃿䀀䃾䃾䃿䀁䀀䀁䀁䃿䀃䀀䀀䀁䃾䀂䀀䃾䃽䃾䀁䀀䃽䃿䀀䃽䀁䀀䀁䀁䀀䃾䀁䀁䃿䀁䀀䀀䃾䃿䀁䀀䃽䀃䀀䃽䃿䃽䃿䀄䀄䃿䀁䃾䃿䃿䃿䃽䀀䀂䀀䀀䀀䀁䃽䀁䃿䃿䃿䀀䃾䃿䃼䃿䃿䃹䃿䀁䀂䀀䃾䀁䀀䃾䃾䀁䀀䀁䀀䃿䀁䃾䃿䀁䃾䀁䀀䃾䀂䀁䃽䃿䀀䀃䀂䀀䀁䃾䀀䃿䃽䃿䀀䀁䃿䃿䃿䀀䃿䀀䃾䃿䀀䃽䃿䀀䀁䀀䀅䀆䃿䃿䃿䀀䃽䃿䀀䃿䃿䀀䀁䃿䀀䃾䃿䃾䀁䀀䃾䀁䀀䀀䃿䀀䀂䀀䃿䃿䃿䀀䃾䃾䃿䃾䀀䀂䀀䀀䀀䃾䀀䀀䀀䀁䀃䀁䀀䀂䃿䃿䃿䀂䀀䃽䃿䃿䀁䀀䃿䀁䀁䀁䀀䃿䃿䃿䃿䃿䃿䃿䃾䃾䃿䃽䃽䃽䃾䃿䃿䀀䃾䀀䃿䃽䃿䃿䃾䀀䀀䀃䀀䀀䀀䃿䀁䃾䀂䀀䃽䀀䃿䃾䀁䃿䃿䃿䃿䃿䀀䀁䃿䀀䃿䃾䀁䀃䀀䀀䃿䃿䀁䀁䀀䀀䀂䃿䃿䃿䃽䃿䃿䃿䀀䀀䀀䀀䃿䃽䃾䀀䀁䀀䀀䀀䃿䀀䃾䃼䃿䃿䃿䃿䃾䃾䀁䀁䃿䀀䃿䀁䀀䃾䀀䃾䃾䀃䃾䃽䀃䃼䀀䀁䃼䃿䃾䃾䀁䀀䃾䀀䀁䃿䃿䀀䃿䀁䀀䃿䀀䃿䀁䀁䀀䀁䀃䀁䀁䀂䃾䃿䀀䃽䃾䀃䀂䃿䃿䃿䃾䃿䀀䃾䃾䀂䀀䃿䀁䃿䀀䃿䀀䀀䀂䀄䃾䃿䀁䀁䀁䀁䃿䃾䃿䃿䀀䃿䃿䃿䃿䃿䀀䀀䀂䀀䃿䀁䃽䃾䀁䀀䀀䃾䃾䀀䀀䃾䃿䀆䀂䃿䀂䃿䀁䀁䃿䀀䀀䀁䀀䃿䃿䀀䀀䃿䃾䀀䃽䃾䀀䃿䀀䀀䀀䃾䀂䀃䀂䃿䃿䀂䃿䀂䀀䀀䀁䀀䃿䃿䃿䀀䃿䃿䀀䃿䀀䃿䃿䃽䀁䃾䃿䀂䀀䃾䃽䀀䃿䃾䃿䀁䀁䀀䃿䃿䃿䀀䃿䀀䀀䃿䃿䀀䀂䀀䃿䃾䀁䃿䃿䃿䃿䀁䃿䃿䀀䀁䀀䃿䃾䃿䀀䃾䃿䃿䃿䃿䃿䀀䀀䀀䃽䃿䀁䀀䀂䃿䃿䃾䃿䃿䀀䀁䀀䀀䀀䀁䃽䃾䀀䃿䃿䀀䀀䃿䃿䀀䀁䀀䀁䀂䀀䃿䃾䀀䃿䀁䀀䀀䃿䃼䀁䃿䃿䃿䃿䃿䀀䀀䀁䀁䀀䃿䀀䀀䃿䀀䃾䃿䃿䀀䀀䀁䃿䃿䃾䀀䀀䃾䃿䀀䃿䃾䀁䀀䃿䀀䃿䃿䃿䀀䀀䀀䃿䃾䃿䃿䃿䃾䀀䀀䀁䀀䀁䀂䃿䃿䃿䀀䃿䀀䃿䀁䀀䃿䀀䀀䀀䀀䀀䀀䀀䃿䀀䃾䀀䀀䃿䃾䃿䃿䃿䃾䃿䃿䃿䃿䀀䀁䀀䀀䀀䀀䃿䀀䀀䃿䃿䃿䃿䀀䀁䃿䀀䃿䃿䀀䃿䃾䀀䀀䀀䃿䃿䃿䀀䀀䀀䀀䃿䀀䀀䀀䃿䃿䃾䃿䀀䃾䀀䀀䀀䀀䀀䃿䃿䀀䃿䃿䀀䃿䃿䀀䀀䀀䃿䀀䃿䃿䀀䀀䀀䀀䃿䃿䀀䃿䃿䀀䀀䀀䀀䃿䀀䀀䀀䀀䀀䃿䃿䃿䃿䃿䃿䀀䃿䀀䀀䃿䃿䀀䀀䀀䃿䀀䀀䀀䀁䃿䀀䀀䃿䀀䀀䃿䃿䀀䀀䃿䀀䀀䃿䃿䃿䃿䃿䀀䃿䃿䃿䃿䀀䃿䀀䀀䀀䀀䃿䃿䃿䀀䃿䃿䀀䀀䀀䀀䀀䀀䃿䀀䀀䃿䃿䃿䀀䃿䃿䀀䃿䀀䃿䃿䀀䃿䀀䃿䃿䃿䀀䀀䀀䃿䃿䃿䀀䀀䀀䀀䃿䃿䀀䀀䃿䀀䀀䃿䃿䀀䃿䃿䀀䀀䀀䀀䃿䃿䀀䀀䃿䃿䀀䃿䀀䀀䃿䃿䃿䃿䃿䀀䀀䀀䀀䃿䀀䃿䃿䀀䀀䀀䀀䀀䃿䀀䀀䃿䃿䀀䃿䃿䃿䃿䀀䀀䀀䀀䃿䀀䃿䃿䃿䃿䃿䃿䃿䃿䃿䃿䃿䀀䀀䀀䃿䀀䀀䃿䃿䃿䀀䀀䃿䃿䀀䀀䀀䃿䃿䀀䃿䃿䃿䀀䀀䃿䀀䃿䃿䃿䀀䃿䀀䀀䃿䃿䀀䃿䃿䀀䀀䃿䃿䃿䀀䃿䃿䃿䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䀀䃿䃿䀀䀀䀀䃿䀀䀀䀀䃿䃿䀀䀀䃿䃿䃿䃿䃿䀀䀀䀀䀀䃿䀀䃿䀀䃿䀀䃿䀀`.replace(/u40(..)/g,"$1")).split('').map((z)=>(c=z.charCodeAt(0))-127))))/8+128;